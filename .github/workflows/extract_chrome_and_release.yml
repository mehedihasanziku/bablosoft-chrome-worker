name: Extract Chrome and Upload to Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter Bablosoft Engine Version'
        required: true
        default: '28.8.1'

permissions:
  contents: write

jobs:
  extract-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Set Bablosoft version info
        id: vars
        run: |
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "date=pending" >> $GITHUB_OUTPUT

      - name: Download FastExecuteScript ZIP
        run: |
          curl -L -o FastExecuteScript.zip "http://downloads.bablosoft.com/distr/FastExecuteScriptProtected64/${{ steps.vars.outputs.version }}/FastExecuteScriptProtected.x64.zip"

      - name: Get highest Worker.xx folder in ZIP
        id: get_worker
        run: |
          folders=$(unzip -Z1 FastExecuteScript.zip | grep -oE '^Worker\.[0-9]+/' | sort -Vr | uniq)
          highest=$(echo "$folders" | head -n1 | sed 's:/$::')
          echo "worker=$highest" >> $GITHUB_OUTPUT
          echo "Found highest worker: $highest"

      - name: Extract manifest filename only from ZIP
        id: extract_manifest_name
        run: |
          # List files in chrome folder inside highest worker folder
          manifest_file=$(unzip -Z1 FastExecuteScript.zip | grep "^${{ steps.get_worker.outputs.worker }}/chrome/.*\.manifest" | head -n1)
          if [ -z "$manifest_file" ]; then
            echo "No manifest file found!"
            exit 1
          fi
          # Get manifest filename without path and extension
          manifest_basename=$(basename "$manifest_file" .manifest)
          echo "manifest_file=$manifest_file" >> $GITHUB_OUTPUT
          echo "chrome_version=$manifest_basename" >> $GITHUB_OUTPUT
          echo "Chrome version from manifest: $manifest_basename"

      - name: Check for existing release with Chrome version
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHROME_VERSION: ${{ steps.extract_manifest_name.outputs.chrome_version }}
          REPO: ${{ github.repository }}
        run: |
          releases=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases")

          exists=$(echo "$releases" | jq --arg ver "$CHROME_VERSION" \
            '[.[] | select(.name | contains($ver))] | length')

          echo "release_exists=$exists" >> $GITHUB_OUTPUT
          echo "Release with Chrome version $CHROME_VERSION exists? $exists"

      - name: Extract full chrome folder only
        if: steps.check_release.outputs.release_exists == '0'
        run: |
          mkdir -p extracted_chrome
          files=$(unzip -Z1 FastExecuteScript.zip | grep "^${{ steps.get_worker.outputs.worker }}/chrome/")
          for file in $files; do
            target_file=${file#${{ steps.get_worker.outputs.worker }}/}
            unzip -j -q FastExecuteScript.zip "$file" -d "extracted_chrome/$(dirname "$target_file")"
          done
          
      - name: Extract FingerprintSwitcher module
        run: |
          mkdir -p extracted_fpswitcher
          
          # Find the full path to FingerprintSwitcher/ folder in zip
          prefix="${{ steps.get_worker.outputs.worker }}/modules/FingerprintSwitcher/"
          files=$(unzip -Z1 FastExecuteScript.zip | grep "^$prefix")

          echo "Found files in FingerprintSwitcher:"
          echo "$files"

          for file in $files; do
            # Remove the common prefix (e.g., Worker.27/modules/)
            target_file=${file#${{ steps.get_worker.outputs.worker }}/modules/}
            unzip -j -q FastExecuteScript.zip "$file" -d "extracted_fpswitcher/$(dirname "$target_file")"
          done

          # Zip only the FingerprintSwitcher folder
          cd extracted_fpswitcher
          zip -rq "../BAS Engine ${{ steps.vars.outputs.version }}_FingerprintSwitcher_Module.zip" FingerprintSwitcher


      - name: Upload FingerprintSwitcher as 1-day artifact
        uses: actions/upload-artifact@v4
        with:
          name: BAS Engine ${{ steps.vars.outputs.version }}_FingerprintSwitcher_Module
          path: BAS Engine ${{ steps.vars.outputs.version }}_FingerprintSwitcher_Module.zip
          retention-days: 1

      - name: Update date based on worker.exe modified time
        id: set_date
        if: steps.check_release.outputs.release_exists == '0'
        run: |
          file=$(find extracted_chrome -iname worker.exe | head -n1)
          if [ -z "$file" ]; then
            echo "worker.exe not found!"
            exit 1
          fi
          mod_time=$(date -u -r "$file" +%Y%m%d)
          echo "date=$mod_time" >> $GITHUB_OUTPUT
          echo "Chrome worker.exe modified date: $mod_time"

      - name: Zip extracted chrome folder silently with custom name
        if: steps.check_release.outputs.release_exists == '0'
        run: |
          cd extracted_chrome
          zip -rq ../chrome_${{ steps.extract_manifest_name.outputs.chrome_version }}.zip chrome

      - name: Upload to GitHub Release
        if: steps.check_release.outputs.release_exists == '0'
        uses: softprops/action-gh-release@v2
        with:
          name: "BAS Engine ${{ steps.vars.outputs.version }} - Chrome ${{ steps.extract_manifest_name.outputs.chrome_version }}"
          tag_name: "v${{ steps.vars.outputs.version }}"
          files: chrome_${{ steps.extract_manifest_name.outputs.chrome_version }}.zip
          body: |
            BAS Engine Version: ${{ steps.vars.outputs.version }}
            Chrome Version: ${{ steps.extract_manifest_name.outputs.chrome_version }}
            Released On: ${{ steps.set_date.outputs.date }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip release message
        if: steps.check_release.outputs.release_exists != '0'
        run: echo "Release with Chrome version ${{ steps.extract_manifest_name.outputs.chrome_version }} already exists. Skipping release upload."
